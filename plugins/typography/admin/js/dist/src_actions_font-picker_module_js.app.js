"use strict";
/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunkblock_builder_typography"] = self["webpackChunkblock_builder_typography"] || []).push([["src_actions_font-picker_module_js"],{

/***/ "./src/actions/font-picker/module.js":
/*!*******************************************!*\
  !*** ./src/actions/font-picker/module.js ***!
  \*******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\nclass FontPicker {\r\n  constructor(link) {\r\n    const self = this;\r\n\r\n    self.query = \"\";\r\n    self.container = link.parentNode.parentNode;\r\n    self.link = link;\r\n\r\n    self.link.addEventListener(\"click\", function (e) {\r\n      self.onPress(e, self);\r\n    });\r\n\r\n    let entries = self.container.querySelectorAll(\"[x-preview]\");\r\n    let size = entries.length;\r\n\r\n    while (size--) {\r\n      const entry = entries[size];\r\n\r\n      if (!entry) continue;\r\n\r\n      entry.addEventListener(\"click\", function (e) {\r\n        if (\r\n          !entry.hasAttribute(\"x-shown\") ||\r\n          entry.getAttribute(\"x-shown\") === \"false\"\r\n        ) {\r\n          self._removeExample();\r\n          self._spawnExample(entry.getAttribute(\"x-font\"), entry);\r\n        } else {\r\n          self._removeExample();\r\n        }\r\n      });\r\n    }\r\n  }\r\n\r\n  onPress(e, self) {\r\n    e.preventDefault();\r\n\r\n    let modalContainer = self.container.querySelector(\".font-picker-modal\");\r\n    let search = self.container.querySelector(\"[x-search]\");\r\n    let close = self.container.querySelector(\"[x-close]\");\r\n    let fonts = modalContainer.querySelectorAll(\"[x-add]\");\r\n\r\n    if (!modalContainer) {\r\n      return false;\r\n    }\r\n\r\n    if (modalContainer.classList.contains(\"hidden\")) {\r\n      // spawn\r\n      self._show(modalContainer);\r\n\r\n      if (close) {\r\n        close.addEventListener(\"click\", function (e) {\r\n          self._hide(modalContainer);\r\n        });\r\n      }\r\n\r\n      if (search) {\r\n        search.addEventListener(\"keyup\", function (e) {\r\n          e.preventDefault();\r\n          self.onSearchKeyUp(e, self);\r\n        });\r\n      }\r\n\r\n      if (0 !== fonts.length) {\r\n        for (let i in fonts) {\r\n          let font = fonts[i];\r\n\r\n          if (\"object\" !== typeof font) {\r\n            continue;\r\n          }\r\n\r\n          font.addEventListener(\"click\", function (e) {\r\n            e.preventDefault();\r\n\r\n            self.pickFont(font, modalContainer, self, e);\r\n          });\r\n        }\r\n      }\r\n    } else {\r\n      // hide\r\n      self._hide(modalContainer);\r\n    }\r\n  }\r\n\r\n  _show(modalContainer) {\r\n    modalContainer.classList.remove(\"hidden\");\r\n    setTimeout(() => {\r\n      modalContainer.classList.remove(\"opacity-0\");\r\n    }, 50);\r\n  }\r\n\r\n  _hide(modalContainer) {\r\n    modalContainer.classList.add(\"opacity-0\");\r\n    setTimeout(() => {\r\n      modalContainer.classList.add(\"hidden\");\r\n    }, 200);\r\n  }\r\n\r\n  _spawnExample(name, target) {\r\n    let container = document.createElement(\"div\");\r\n    container.id = \"font-preview\";\r\n    container.setAttribute(\"x-font\", target.getAttribute(\"x-font\"));\r\n    container.innerHTML =\r\n      '<iframe src=\"/wp-admin/post.php?post=2&action=font_example&font-family=' +\r\n      name +\r\n      '\"></iframe>';\r\n\r\n    let posY = this.getExamplePosY(target);\r\n    let posX = this.getExamplePosX(target);\r\n\r\n    container.style.top = posY + \"px\";\r\n    container.style.left = posX + \"px\";\r\n\r\n    target.parentNode.parentNode.appendChild(container);\r\n    target.setAttribute(\"x-shown\", \"true\");\r\n  }\r\n\r\n  getExamplePosY(target) {\r\n    let offsetHeight = target.offsetHeight;\r\n\r\n    return offsetHeight;\r\n  }\r\n\r\n  getExamplePosX(target) {\r\n    let offsetWidth = target.offsetWidth;\r\n    return offsetWidth;\r\n  }\r\n\r\n  _removeExample() {\r\n    let preview = document.getElementById(\"font-preview\");\r\n\r\n    if (preview) {\r\n      let previewButton = document.querySelector(\r\n        \"button[x-preview][x-font='\" + preview.getAttribute(\"x-font\") + \"']\"\r\n      );\r\n\r\n      preview.parentNode.removeChild(preview);\r\n      previewButton.setAttribute(\"x-shown\", \"false\");\r\n    }\r\n  }\r\n\r\n  async pickFont(font, modalContainer, self, e) {\r\n    let fontName = font.getAttribute(\"x-font\");\r\n    let type = font.getAttribute(\"x-type\");\r\n    let input = self.container.querySelector(\"[x-value-hidden]\");\r\n    let controller = await window\r\n      .getAppLoader()\r\n      .blockControl.get(\r\n        window.getAppLoader().editing,\r\n        window.getAppLoader().editingObject\r\n      );\r\n\r\n    if (type) {\r\n      input.value = \"'\" + fontName + \"', \" + type;\r\n    } else {\r\n      input.value = \"'\" + fontName + \"'\";\r\n    }\r\n\r\n    self.container.querySelector(\"[x-value]\").innerHTML = fontName;\r\n\r\n    self._hide(modalContainer);\r\n\r\n    window.getAppLoader().event.emit(\"bb-builder-control-select-change\", {\r\n      node: input,\r\n      changeEvent: e,\r\n      controller: controller,\r\n    });\r\n\r\n    window.getAppLoader().event.emit(\"bb-builder-load-font\", {\r\n      fontName: fontName,\r\n    });\r\n  }\r\n\r\n  onSearchKeyUp(e, self) {\r\n    const val = e.target.value;\r\n    let ti = setTimeout(() => {\r\n      if (val === e.target.value) {\r\n        self.search(val);\r\n      }\r\n\r\n      clearTimeout(ti);\r\n    }, 1000);\r\n  }\r\n\r\n  search(query) {\r\n    const self = this;\r\n    self.query = query.toLowerCase();\r\n\r\n    let items = self.container.querySelectorAll(\"[x-key]\");\r\n    let stackSize = items.length;\r\n\r\n    while (stackSize--) {\r\n      let item = items[stackSize];\r\n\r\n      if (!item) {\r\n        continue;\r\n      }\r\n\r\n      let key = item.getAttribute(\"x-key\");\r\n\r\n      if (key.indexOf(self.query) === -1) {\r\n        item.classList.add(\"hidden\");\r\n      } else {\r\n        if (item.classList.contains(\"hidden\")) {\r\n          item.classList.remove(\"hidden\");\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (FontPicker);\r\n\n\n//# sourceURL=webpack://block-builder-typography/./src/actions/font-picker/module.js?");

/***/ })

}]);