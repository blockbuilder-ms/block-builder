"use strict";
/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunkblock_builder_editor"] = self["webpackChunkblock_builder_editor"] || []).push([["src_core_request_js"],{

/***/ "./src/core/request.js":
/*!*****************************!*\
  !*** ./src/core/request.js ***!
  \*****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\nclass Request {\r\n  /**\r\n   * Returns a requests object that can be passed to a get/post/delete/patch request\r\n   *\r\n   * @return {RequestObject}\r\n   */\r\n  async make() {\r\n    let Object = await __webpack_require__.e(/*! import() */ \"src_core_request_request-object_js\").then(__webpack_require__.bind(__webpack_require__, /*! ./request/request-object */ \"./src/core/request/request-object.js\"));\r\n\r\n    return new Object.default();\r\n  }\r\n\r\n  async loadData(key, target, space, supress) {\r\n    let requestObject = await this.make();\r\n    let append = \"\";\r\n\r\n    if (!window.getAppLoader().state.request_cache) {\r\n      window.getAppLoader().state.request_cache = {};\r\n    }\r\n\r\n    if (space) {\r\n      append = \"?space=\" + space;\r\n    }\r\n\r\n    if (window.getAppLoader().state.request_cache[key + append]) {\r\n      return this.cache[key + append];\r\n    }\r\n\r\n    requestObject.setHeader(\"X-WP-Nonce\", BBNonce);\r\n    requestObject.setHeader(\"X-WP-PostId\", postObject.ID);\r\n    requestObject.setUrl(\"/wp-json/block-builder/v1/lazyload/\" + key + append);\r\n\r\n    let response = await this.get(requestObject);\r\n\r\n    // Request was not 200 succes\r\n    if (response.status !== 200) {\r\n      if (!supress) {\r\n        window.getAppLoader().notification.error(response.response, 2500);\r\n      }\r\n      return;\r\n    }\r\n\r\n    window.getAppLoader().state.request_cache[key + append] = response;\r\n\r\n    // request was an succes\r\n    if (!supress) {\r\n      window.getAppLoader().notification.succes(response.response, 2500);\r\n    }\r\n\r\n    let spinner = target.querySelector(\"[x-spinner]\");\r\n\r\n    if (spinner) {\r\n      spinner.classList.add(\"opacity-0\");\r\n\r\n      setTimeout(() => {\r\n        target.innerHTML = response.body_response;\r\n      }, 200);\r\n    } else {\r\n      target.innerHTML = response.body_response;\r\n    }\r\n\r\n    target.setAttribute(\"x-loaded\", true);\r\n    setTimeout(async () => {\r\n      await window.getAppLoader().settings.load();\r\n      await window.getAppLoader().loadActions();\r\n    }, 200);\r\n\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * Will change and update the request object to be ready\r\n   * for a get call\r\n   *\r\n   * @var {RequestObject} requestObject\r\n   *\r\n   * @return {ResponseObject}\r\n   */\r\n  async get(requestObject) {\r\n    requestObject.setMethod(\"GET\");\r\n\r\n    if (window.getAppLoader().state.request_cache[requestObject.getUrl()]) {\r\n      return window.getAppLoader().state.request_cache[requestObject.getUrl()];\r\n    }\r\n\r\n    return await this.run(requestObject);\r\n  }\r\n\r\n  /**\r\n   * Will change and update the request object to be ready\r\n   * for a post call\r\n   *\r\n   * @var {RequestObject} requestObject\r\n   *\r\n   * @return {ResponseObject}\r\n   */\r\n  async post(requestObject) {\r\n    requestObject.setMethod(\"POST\");\r\n\r\n    return await this.run(requestObject);\r\n  }\r\n\r\n  /**\r\n   * Will change and update the request object to be ready\r\n   * for a delete call\r\n   *\r\n   * @var {RequestObject} requestObject\r\n   *\r\n   * @return {ResponseObject}\r\n   */\r\n  async delete(requestObject) {\r\n    requestObject.setMethod(\"DELETE\");\r\n\r\n    return await this.run(requestObject);\r\n  }\r\n\r\n  /**\r\n   * Will change and update the request object to be ready\r\n   * for a put call\r\n   *\r\n   * @var {RequestObject} requestObject\r\n   *\r\n   * @return {ResponseObject}\r\n   */\r\n  async put(requestObject) {\r\n    requestObject.setMethod(\"PUT\");\r\n\r\n    return await this.run(requestObject);\r\n  }\r\n\r\n  /**\r\n   * Main firing sequence executed by the sub branches (GET|POST|DELETE|PUT)\r\n   *\r\n   * @var {RequestObject} requestObject\r\n   *\r\n   * @return {ResponseObject}\r\n   */\r\n  async run(requestObject) {\r\n    let args = {\r\n      method: requestObject.getMethod(),\r\n      mode: requestObject.getMode(),\r\n      cache: requestObject.getCacheMode(),\r\n      credentials: requestObject.getCredentials(),\r\n      headers: requestObject.getHeaders(),\r\n      redirect: requestObject.getRedirect(),\r\n      referrerPolicy: requestObject.getReferrerPolicy(),\r\n    };\r\n\r\n    if (args.method !== \"GET\") {\r\n      args.body = requestObject.getBody();\r\n    }\r\n\r\n    if (!args.cache || !args.method) {\r\n      console.log(\"Arguments were not valid\");\r\n      return false;\r\n    }\r\n\r\n    let result = await fetch(requestObject.getUrl(), args);\r\n\r\n    if (result.status !== 200) {\r\n      console.error(\"Request failed\", result);\r\n      return false;\r\n    }\r\n\r\n    let response = await result.json();\r\n\r\n    return response;\r\n  }\r\n}\r\n\r\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Request);\r\n\n\n//# sourceURL=webpack://block-builder-editor/./src/core/request.js?");

/***/ })

}]);