"use strict";
/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunkblock_builder_editor"] = self["webpackChunkblock_builder_editor"] || []).push([["src_actions_modal_module_js"],{

/***/ "./src/actions/modal/module.js":
/*!*************************************!*\
  !*** ./src/actions/modal/module.js ***!
  \*************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\nclass Modal {\r\n  constructor(link, core, isDirect) {\r\n    const self = this;\r\n    self.timeout = false;\r\n    self.link = link;\r\n    self.open = false;\r\n\r\n    if (self.link && self.link.hasAttribute(\"x-options\")) {\r\n      self.options = link.getAttribute(\"x-options\");\r\n\r\n      if (self.options) {\r\n        self.options = JSON.parse(self.options);\r\n      }\r\n    }\r\n\r\n    window.getAppLoader().event.on(\"bb-builder-modal-close\", function () {\r\n      if (self.open) {\r\n        self._onPress(self);\r\n      }\r\n    });\r\n\r\n    if (self.options && self.options[\"data-id\"]) {\r\n      self.content = document.getElementById(self.options[\"data-id\"]);\r\n      if (!isDirect) {\r\n        self.link.addEventListener(\"click\", function (e) {\r\n          self.onPress(e, self);\r\n        });\r\n      }\r\n\r\n      let closeBtns = self.content.querySelectorAll(\"[x-close]\");\r\n\r\n      if (!closeBtns) {\r\n        return;\r\n      }\r\n\r\n      let btnSize = closeBtns.length;\r\n\r\n      while (btnSize--) {\r\n        let btn = closeBtns[btnSize];\r\n\r\n        if (!btn) {\r\n          continue;\r\n        }\r\n\r\n        btn.addEventListener(\"click\", function () {\r\n          self.open = true;\r\n          self._onPress(self);\r\n        });\r\n      }\r\n    } else {\r\n      console.log(\"Modal need to know the ID of the target container\");\r\n    }\r\n  }\r\n\r\n  onPress(e, self) {\r\n    e.preventDefault();\r\n\r\n    this._onPress(self);\r\n  }\r\n\r\n  async _onPress(self) {\r\n    window.getAppLoader().event.emit(\"bb-modal-spawn-before\", {\r\n      options: self.options,\r\n      link: self.link,\r\n      container: self.content,\r\n      state: !self.open,\r\n    });\r\n\r\n    if (self.options && self.options.emit) {\r\n      window.getAppLoader().event.emit(self.options.emit[0] + \"-before\", {\r\n        options: self.options,\r\n        link: self.link,\r\n        container: self.content,\r\n        state: !self.open,\r\n        data: self.options.emit[1],\r\n      });\r\n    }\r\n\r\n    if (!self.open) {\r\n      // Spawn modal\r\n      if (!self.options || !self.options.standalone) {\r\n        window.getAppLoader().event.emit(\"bb-builder-modal-close\");\r\n      }\r\n\r\n      if (self.options && self.options.attributes) {\r\n        await self._updateAttributes();\r\n      }\r\n\r\n      await self._spawn();\r\n\r\n      if (!self.options || !self.options.standalone) {\r\n        // Shorten page content\r\n        document.getElementById(\"builder-frame\").style.marginLeft =\r\n          self.content.offsetWidth + \"px\";\r\n\r\n        document.getElementById(\"builder-frame\").style.width =\r\n          \"calc(100% - 50px - \" + self.content.offsetWidth + \"px)\";\r\n      }\r\n\r\n      if (self.link && self.link.querySelector(\".closed\")) {\r\n        self.link.querySelector(\".closed\").classList.add(\"hidden\");\r\n        self.link.querySelector(\".open\").classList.remove(\"hidden\");\r\n      }\r\n\r\n      self.open = true;\r\n\r\n      if (self.options.emit) {\r\n        window.getAppLoader().event.emit(self.options.emit[0], {\r\n          options: self.options,\r\n          link: self.link,\r\n          container: self.content,\r\n          state: self.open,\r\n          data: self.options.emit[1],\r\n        });\r\n      }\r\n    } else {\r\n      // Shorten page content\r\n      if (!self.options || !self.options.standalone) {\r\n        document.getElementById(\"builder-frame\").style.marginLeft = \"0px\";\r\n        document.getElementById(\"builder-frame\").style.width = \"100%\";\r\n      }\r\n\r\n      if (self.link && self.link.querySelector(\".closed\")) {\r\n        self.link.querySelector(\".closed\").classList.remove(\"hidden\");\r\n        self.link.querySelector(\".open\").classList.add(\"hidden\");\r\n      }\r\n\r\n      self._despawn();\r\n\r\n      self.open = false;\r\n\r\n      if (self.options.emit) {\r\n        window.getAppLoader().event.emit(self.options.emit[0], {\r\n          options: self.options,\r\n          link: self.link,\r\n          container: self.content,\r\n          state: self.open,\r\n          data: self.options.emit[1],\r\n        });\r\n      }\r\n    }\r\n\r\n    window.getAppLoader().event.emit(\"bb-modal-spawn-after\", {\r\n      options: self.options,\r\n      link: self.link,\r\n      container: self.content,\r\n      state: !self.open,\r\n    });\r\n  }\r\n\r\n  async _updateAttributes() {\r\n    const self = this;\r\n    let attributes = self.options.attributes;\r\n\r\n    if (!attributes) {\r\n      return false;\r\n    }\r\n\r\n    for (let i in attributes) {\r\n      let option = attributes[i];\r\n      let attributeObjs = self.content.querySelectorAll(\"[x-attr-\" + i + \"]\");\r\n      let events = self.content.querySelectorAll(\"[x-action='event']\");\r\n\r\n      for (let j in attributeObjs) {\r\n        let obj = attributeObjs[j];\r\n\r\n        if (\"object\" !== typeof obj) {\r\n          continue;\r\n        }\r\n\r\n        obj.innerHTML = option;\r\n      }\r\n\r\n      for (let j in events) {\r\n        let event = events[j];\r\n\r\n        if (\"object\" !== typeof event) {\r\n          continue;\r\n        }\r\n\r\n        let options = event.hasAttribute(\"x-options\")\r\n          ? JSON.parse(event.getAttribute(\"x-options\"))\r\n          : false;\r\n\r\n        if (!options) {\r\n          continue;\r\n        }\r\n\r\n        if (!options.attributes) {\r\n          options.attributes = {};\r\n        }\r\n\r\n        options.attributes[i] = option;\r\n\r\n        event.setAttribute(\"x-options\", JSON.stringify(options));\r\n      }\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  _despawn() {\r\n    const self = this;\r\n    self.content.classList.add(\"opacity-0\");\r\n\r\n    setTimeout(function () {\r\n      self.content.classList.add(\"hidden\");\r\n    }, 215);\r\n  }\r\n  _spawn() {\r\n    const self = this;\r\n    self.content.classList.remove(\"hidden\");\r\n    setTimeout(function () {\r\n      self.content.classList.remove(\"opacity-0\");\r\n    }, 15);\r\n  }\r\n\r\n  /**\r\n   * Will force run a toggle event for a certain modal.\r\n   * @param {*} id\r\n   */\r\n  forceRun(options) {\r\n    this.options = options;\r\n    this._onPress(this);\r\n  }\r\n}\r\n\r\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Modal);\r\n\n\n//# sourceURL=webpack://block-builder-editor/./src/actions/modal/module.js?");

/***/ })

}]);