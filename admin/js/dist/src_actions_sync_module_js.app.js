"use strict";
/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunkblock_builder_editor"] = self["webpackChunkblock_builder_editor"] || []).push([["src_actions_sync_module_js"],{

/***/ "./src/actions/sync/module.js":
/*!************************************!*\
  !*** ./src/actions/sync/module.js ***!
  \************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\nclass Sync {\r\n  constructor(link, core, isDirect) {\r\n    const self = this;\r\n    self.timeout = false;\r\n    self.link = link;\r\n    self.open = false;\r\n\r\n    if (self.link && self.link.hasAttribute(\"x-options\")) {\r\n      self.options = link.getAttribute(\"x-options\");\r\n\r\n      if (self.options) {\r\n        self.options = JSON.parse(self.options);\r\n      }\r\n    }\r\n\r\n    if (self.options && self.options.when && self.options.what) {\r\n      switch (self.options.when) {\r\n        case \"click\":\r\n          self.link.addEventListener(\"click\", function (e) {\r\n            self.what = document.querySelector(\r\n              '[name=\"' + self.options.what + '\"]'\r\n            );\r\n            self.onPress(e, self);\r\n          });\r\n          break;\r\n\r\n        case \"change\":\r\n          self.link.addEventListener(\"change\", function (e) {\r\n            if (\r\n              self.link.tagName === \"INPUT\" &&\r\n              self.link.getAttribute(\"type\") === \"checkbox\"\r\n            ) {\r\n              self.what = document.querySelector(\r\n                '[name=\"' + self.options.what + '\"]'\r\n              ).checked;\r\n              console.log(\r\n                document.querySelector('[name=\"' + self.options.what + '\"]')\r\n              );\r\n            } else {\r\n              self.what = document.querySelector(\r\n                '[name=\"' + self.options.what + '\"]'\r\n              );\r\n            }\r\n            self.onChange(e, self);\r\n          });\r\n          break;\r\n\r\n        default:\r\n          console.log(\"Not a valid sync type chosen\");\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * initial handle for click events\r\n   *\r\n   * @param {*} e\r\n   * @param {*} self\r\n   */\r\n  onPress(e, self) {\r\n    e.preventDefault();\r\n\r\n    this._onPress(self);\r\n  }\r\n\r\n  async _onPress(self) {\r\n    await this.sync(self);\r\n  }\r\n\r\n  /**\r\n   * initial handle for click events\r\n   *\r\n   * @param {*} e\r\n   * @param {*} self\r\n   */\r\n  onChange(e, self) {\r\n    e.preventDefault();\r\n\r\n    this._onChange(self);\r\n  }\r\n\r\n  async _onChange(self) {\r\n    await this.sync(self);\r\n  }\r\n\r\n  /**\r\n   * Synchronizes a data key with the database\r\n   *\r\n   * @returns {bool}\r\n   */\r\n  async sync() {\r\n    const self = this;\r\n    const appLoader = window.getAppLoader();\r\n\r\n    let requestObject = await appLoader.request.make();\r\n\r\n    requestObject.setUrl(\"/wp-json/block-builder/v1/sync/\" + self.options.what);\r\n    requestObject.setBody({\r\n      body: {\r\n        key: self.options.what,\r\n        data: \"object\" === typeof self.what ? self.what.value : self.what,\r\n      },\r\n    });\r\n\r\n    let response = await appLoader.request.put(requestObject);\r\n\r\n    // Request was not 200 succes\r\n    if (response.status !== 200) {\r\n      appLoader.notification.error(response.response, 2500);\r\n      return;\r\n    }\r\n\r\n    // request was an succes\r\n    appLoader.notification.succes(response.response, 2500);\r\n\r\n    if (self.options.reload) {\r\n      appLoader.dom.reload();\r\n    }\r\n\r\n    if (self.options.ui_reload) {\r\n      appLoader.settings.reload();\r\n      setTimeout(() => {\r\n        appLoader.request.loadData(\r\n          self.options.ui_reload,\r\n          document.querySelector(\r\n            '[x-lazyload=\"' + self.options.ui_reload + '\"]'\r\n          ),\r\n          \"admin\",\r\n          true\r\n        );\r\n      }, 500);\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * Will force run a toggle event for a certain modal.\r\n   * @param {*} id\r\n   */\r\n  forceRun(options) {\r\n    //\r\n  }\r\n}\r\n\r\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Sync);\r\n\n\n//# sourceURL=webpack://block-builder-editor/./src/actions/sync/module.js?");

/***/ })

}]);