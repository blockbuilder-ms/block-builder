/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunkblock_builder_editor"] = self["webpackChunkblock_builder_editor"] || []).push([["src_listeners_bb-context-spawn-before_build-context-menu_js"],{

/***/ "./src/listeners/bb-context-spawn-before/build-context-menu.js":
/*!*********************************************************************!*\
  !*** ./src/listeners/bb-context-spawn-before/build-context-menu.js ***!
  \*********************************************************************/
/***/ (() => {

eval("const appLoader = window.getAppLoader();\r\n\r\nappLoader.event.on(\r\n  \"bb-context-spawn-before\",\r\n  async function (event) {\r\n    // Succes\r\n    // TODO: Change original event name of event in here so its not event.event\r\n    let container = event.container.querySelector(\"[x-context]\");\r\n    let blockObj = event.event.target;\r\n    container.innerHTML = \"\";\r\n    await contextWalker(blockObj, event);\r\n\r\n    await appLoader.loadActions();\r\n\r\n    return true;\r\n  },\r\n  function (errorCode, errorData, errorMessage) {\r\n    // Error\r\n    appLoader.debug.log([{ errorCode, errorData, errorMessage }]);\r\n  },\r\n  document\r\n);\r\n\r\nasync function contextWalker(blockObj, event) {\r\n  if (!blockObj || !blockObj.classList || blockObj.tagName === \"BODY\") {\r\n    return false;\r\n  }\r\n  let container = event.container.querySelector(\"[x-context]\");\r\n\r\n  if (blockObj.classList.contains(\"standard-view\")) {\r\n    console.log(\"Root exploring\");\r\n    let elem = await contextBuild(\r\n      \"item\",\r\n      \"Settings\",\r\n      {},\r\n      blockObj.getAttribute(\"data-id\")\r\n    );\r\n    container.appendChild(elem);\r\n\r\n    return true;\r\n  }\r\n\r\n  if (!blockObj.hasAttribute(\"data-id\")) {\r\n    await contextWalker(blockObj.parentNode, event);\r\n    return true;\r\n  }\r\n\r\n  let id = blockObj.getAttribute(\"data-id\");\r\n  let blockData = await appLoader.dom.find(id);\r\n\r\n  if (blockData.context) {\r\n    let title = blockData.tag.split(\":\")[1];\r\n    let elem = await contextBuild(\r\n      \"dropdown\",\r\n      title.charAt(0).toUpperCase() + title.substring(1),\r\n      blockData.context,\r\n      blockObj.getAttribute(\"data-id\")\r\n    );\r\n\r\n    container.appendChild(elem);\r\n  }\r\n\r\n  await contextWalker(blockObj.parentNode, event);\r\n\r\n  return true;\r\n}\r\n\r\nasync function contextBuild(type, label, attrs, id) {\r\n  //\r\n  let template;\r\n  switch (type) {\r\n    case \"item\":\r\n      //\r\n      template = await appLoader.template.get(\"context-menu-item\");\r\n\r\n      template.innerHTML = template.innerHTML.replace(\"{label}\", label);\r\n\r\n      for (let i in attrs) {\r\n        let attr = attrs[i];\r\n        template.setAttribute(i, attr);\r\n      }\r\n\r\n      return template;\r\n      break;\r\n\r\n    case \"dropdown\":\r\n      //\r\n      template = await appLoader.template.get(\"context-dropdown-menu-item\");\r\n      template.innerHTML = template.innerHTML.replace(\"{label}\", label);\r\n\r\n      for (let i in attrs) {\r\n        if (i === \"items\") {\r\n          continue;\r\n        }\r\n\r\n        let attr = attrs[i];\r\n        template.setAttribute(i, attr);\r\n      }\r\n\r\n      if (attrs.items) {\r\n        for (let j in attrs.items) {\r\n          let item = attrs.items[j];\r\n          let obj = await appLoader.template.get(\"context-menu-item\");\r\n          obj.innerHTML = obj.innerHTML.replace(\"{label}\", item.label);\r\n\r\n          if (item.attrs) {\r\n            item.attrs[\"x-options\"] = JSON.stringify({\r\n              ...JSON.parse(item.attrs[\"x-options\"]),\r\n              ...{\r\n                attributes: { item: id },\r\n              },\r\n            });\r\n\r\n            for (let i in item.attrs) {\r\n              let attr = item.attrs[i];\r\n              obj.setAttribute(i, attr);\r\n            }\r\n          }\r\n\r\n          template.querySelector(\"[x-target]\").appendChild(obj);\r\n        }\r\n\r\n        return template;\r\n      }\r\n\r\n      break;\r\n\r\n    default:\r\n      appLoader.event.emit(`bb-context-build-${label}`);\r\n  }\r\n}\r\n\n\n//# sourceURL=webpack://block-builder-editor/./src/listeners/bb-context-spawn-before/build-context-menu.js?");

/***/ })

}]);