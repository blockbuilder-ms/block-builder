"use strict";
/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunkblock_builder_editor"] = self["webpackChunkblock_builder_editor"] || []).push([["src_core_block-control_controller_js"],{

/***/ "./src/core/block-control/controller.js":
/*!**********************************************!*\
  !*** ./src/core/block-control/controller.js ***!
  \**********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\nconst appLoader = window.getAppLoader();\r\nconst uuidv4 = (__webpack_require__(/*! uuid */ \"./node_modules/uuid/dist/esm-browser/index.js\").v4);\r\n\r\nclass Controller {\r\n  constructor() {\r\n    const self = this;\r\n\r\n    self.mainContainer = document.getElementById(\"builder-block-edit-modal\");\r\n  }\r\n\r\n  /**\r\n   * Builds an controller environment instance\r\n   * and prepares it to be used.\r\n   *\r\n   * @param {object} block\r\n   * @param {object} item\r\n   *\r\n   * @return {object}\r\n   */\r\n  async build(block, item) {\r\n    const self = this;\r\n\r\n    self.block = block;\r\n    self.item = item;\r\n    self.template = document.getElementById(\"block-edit-instance\");\r\n\r\n    let segmentTotal = block.controls.length - 1;\r\n    let segmentSize = block.controls.length;\r\n    let currentInstances = self.mainContainer.querySelectorAll(\r\n      \".instance:not(.hidden)\"\r\n    );\r\n\r\n    for (let j in currentInstances) {\r\n      let instance = currentInstances[j];\r\n\r\n      if (\"object\" !== typeof instance) {\r\n        continue;\r\n      }\r\n\r\n      instance.classList.add(\"hidden\");\r\n    }\r\n\r\n    let instance = self.template.content.firstElementChild.cloneNode(true);\r\n    instance.id = self.generateId();\r\n\r\n    self.mainContainer.appendChild(instance);\r\n\r\n    while (segmentSize--) {\r\n      let segment = block.controls[segmentTotal - segmentSize];\r\n      let first = false;\r\n      if (!segment) {\r\n        continue;\r\n      }\r\n\r\n      let segmentTemplate = document.getElementById(\r\n        \"block-edit-navigation-item\"\r\n      );\r\n\r\n      let segmentInstance =\r\n        segmentTemplate.content.firstElementChild.cloneNode(true);\r\n\r\n      if (segmentTotal - segmentSize === 0) {\r\n        first = true;\r\n        segmentInstance.querySelector(\"a\").classList.add(\"active\");\r\n      }\r\n\r\n      segmentInstance.innerHTML = segmentInstance.innerHTML.replaceAll(\r\n        \"{target}\",\r\n        segment.name\r\n      );\r\n\r\n      segmentInstance.innerHTML = segmentInstance.innerHTML.replaceAll(\r\n        \"{label}\",\r\n        segment.label\r\n      );\r\n\r\n      self.mainContainer\r\n        .querySelector(\"[x-navigation]\")\r\n        .appendChild(segmentInstance);\r\n\r\n      if (segment.content) {\r\n        await self._buildContent(segment, segment.content, first);\r\n      }\r\n    }\r\n\r\n    self.instance = instance;\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Builds the content of the controller environment - by building the controller\r\n   * elements to be used to configure the varios areas of the block.\r\n   *\r\n   * @param {*} segment\r\n   * @param {*} segmentContent\r\n   * @param {*} first\r\n   * @param {*} mainContainer\r\n   */\r\n  async _buildContent(segment, segmentContent, first, mainContainer) {\r\n    const self = this;\r\n\r\n    let templateId = \"\";\r\n    let template = false;\r\n    let classes = \"\";\r\n    let segmentContentTotal = segmentContent.length - 1;\r\n    let segmentContentSize = segmentContent.length;\r\n    let segmentContainer = await self._buildContainer(segment, mainContainer);\r\n\r\n    if (!mainContainer) {\r\n      if (first) {\r\n        segmentContainer.classList.add(\"active\");\r\n      } else {\r\n        segmentContainer.classList.add(\"hidden\", \"opacity-0\");\r\n      }\r\n    }\r\n\r\n    while (segmentContentSize--) {\r\n      let s = segmentContent[segmentContentTotal - segmentContentSize];\r\n      let uniqueId = self.generateId();\r\n      if (!s) {\r\n        continue;\r\n      }\r\n\r\n      switch (s.type) {\r\n        case \"control\":\r\n          templateId = s._id;\r\n\r\n          template = await appLoader.template.get(templateId, \"control\");\r\n          if (!template) {\r\n            continue;\r\n          }\r\n\r\n          template.innerHTML = template.innerHTML.replaceAll(\"{id}\", uniqueId);\r\n\r\n          template.innerHTML = template.innerHTML.replaceAll(\r\n            \"{data-id}\",\r\n            self.block[\"data-id\"]\r\n          );\r\n\r\n          if (s.standalone) {\r\n            template.innerHTML = template.innerHTML.replaceAll(\r\n              \"{standalone}\",\r\n              s.standalone\r\n            );\r\n          } else {\r\n            template.innerHTML = template.innerHTML.replaceAll(\r\n              \"{standalone}\",\r\n              \"false\"\r\n            );\r\n          }\r\n\r\n          classes = s.class ? s.class.split(\" \") : \"\";\r\n          for (let i in s) {\r\n            if (i === \"options\") {\r\n              continue;\r\n            }\r\n\r\n            if (\"string\" === typeof s[i]) {\r\n              template.innerHTML = template.innerHTML.replaceAll(\r\n                \"{\" + i + \"}\",\r\n                s[i]\r\n              );\r\n            }\r\n\r\n            if (\"object\" === typeof s[i]) {\r\n              template.innerHTML = template.innerHTML.replaceAll(\r\n                \"{\" + i + \"}\",\r\n                JSON.stringify(s[i])\r\n              );\r\n            }\r\n          }\r\n\r\n          if (s.options) {\r\n            let optionsHtml = \"\";\r\n            for (let i in s.options) {\r\n              let option = s.options[i];\r\n\r\n              if (!option) {\r\n                continue;\r\n              }\r\n\r\n              optionsHtml +=\r\n                \"<option value='\" + i + \"'>\" + option + \"</option>\";\r\n            }\r\n\r\n            template.innerHTML = template.innerHTML.replaceAll(\r\n              \"{options}\",\r\n              optionsHtml\r\n            );\r\n          }\r\n\r\n          if (s.conditional) {\r\n            for (let i in s.conditional) {\r\n              let obj = template.querySelector('[x-if=\"' + i + '\"]');\r\n\r\n              if (!obj) {\r\n                continue;\r\n              }\r\n\r\n              if (s.conditional[i] === false) {\r\n                let parent = obj.parentNode;\r\n                parent.removeChild(obj);\r\n\r\n                continue;\r\n              }\r\n\r\n              obj.innerHTML = s.conditional[i];\r\n            }\r\n          }\r\n\r\n          template.id = s.id ? s.id : \"\";\r\n\r\n          if (classes.length !== 0) {\r\n            template.classList.add(...classes);\r\n          } else if (s.class !== \"\") {\r\n            template.classList.add(s.class);\r\n          }\r\n\r\n          if (s.lazyload) {\r\n            let field = template.querySelector(\"[name='\" + s.target + \"']\");\r\n\r\n            if (field) {\r\n              field.setAttribute(\"disabled\", true);\r\n              field.classList.add(\r\n                \"opacity-25\",\r\n                \"select-none\",\r\n                \"duration-200\",\r\n                \"transition-all\"\r\n              );\r\n            }\r\n          }\r\n\r\n          if (s[\"x-if\"]) {\r\n            let condition = s[\"x-if\"];\r\n            let hasCondition = self.isCondition(condition);\r\n\r\n            if (hasCondition) {\r\n              condition = self.splitCondition(condition);\r\n\r\n              let key = condition[0];\r\n              let where = condition[1];\r\n              let value = condition[2];\r\n\r\n              let field = segmentContainer.querySelector(\r\n                \"[name='\" + key + \"']\"\r\n              );\r\n\r\n              if (field) {\r\n                let result = self.solveCondition(where, value, field);\r\n\r\n                if (!result) {\r\n                  // Disable field\r\n                  template.setAttribute(\"x-disabled\", true);\r\n                  template.setAttribute(\"disabled\", true);\r\n                  template.classList.add(\r\n                    \"opacity-25\",\r\n                    \"select-none\",\r\n                    \"duration-200\",\r\n                    \"transition-all\"\r\n                  );\r\n                }\r\n\r\n                window\r\n                  .getAppLoader()\r\n                  .event.on(\"bb-builder-synced-before\", function () {\r\n                    console.log(\"Synced\");\r\n                    let field = segmentContainer.querySelector(\r\n                      \"[name='\" + key + \"']\"\r\n                    );\r\n\r\n                    if (field) {\r\n                      let result = self.solveCondition(where, value, field);\r\n\r\n                      if (!result) {\r\n                        // Disable field\r\n                        template.setAttribute(\"x-disabled\", true);\r\n                        template.setAttribute(\"disabled\", true);\r\n                        template.classList.add(\r\n                          \"opacity-25\",\r\n                          \"select-none\",\r\n                          \"duration-200\",\r\n                          \"transition-all\"\r\n                        );\r\n                      } else {\r\n                        template.removeAttribute(\"x-disabled\");\r\n                        template.removeAttribute(\"disabled\");\r\n                        template.classList.remove(\r\n                          \"opacity-25\",\r\n                          \"select-none\",\r\n                          \"duration-200\",\r\n                          \"transition-all\"\r\n                        );\r\n                      }\r\n                    }\r\n                  });\r\n              }\r\n            }\r\n          }\r\n\r\n          segmentContainer.querySelector(\"[x-content]\").appendChild(template);\r\n\r\n          let ti = setTimeout(async () => {\r\n            if (templateId === \"wp-editor\") {\r\n              wp.editor.initialize(uniqueId + \"-editor\");\r\n            }\r\n\r\n            if (s.lazyload) {\r\n              let requestObject = await appLoader.request.make();\r\n              requestObject.setUrl(\"/wp-json/\" + s.lazyload_using);\r\n\r\n              let response = await appLoader.request.get(requestObject);\r\n\r\n              // Request was not 200 succes\r\n              if (response.status !== 200) {\r\n                appLoader.notification.error(response.response, 2500);\r\n                return;\r\n              }\r\n              let field = segmentContainer.querySelector(\r\n                \"[name='\" + s.target + \"']\"\r\n              );\r\n\r\n              if (field) {\r\n                field.innerHTML = \"\";\r\n                for (let i in response.body_response) {\r\n                  let option = document.createElement(\"option\");\r\n                  option.value = i;\r\n                  option.innerHTML = response.body_response[i];\r\n\r\n                  field.appendChild(option);\r\n                }\r\n\r\n                if (!template.hasAttribute(\"x-disabled\")) {\r\n                  field.removeAttribute(\"disabled\");\r\n                  field.classList.remove(\r\n                    \"opacity-25\",\r\n                    \"select-none\",\r\n                    \"duration-200\",\r\n                    \"transition-all\"\r\n                  );\r\n                }\r\n\r\n                window\r\n                  .getAppLoader()\r\n                  .event.on(\"bb-builder-synced-before\", function () {\r\n                    if (!template.hasAttribute(\"x-disabled\")) {\r\n                      field.removeAttribute(\"disabled\");\r\n                      field.classList.remove(\r\n                        \"opacity-25\",\r\n                        \"select-none\",\r\n                        \"duration-200\",\r\n                        \"transition-all\"\r\n                      );\r\n                    }\r\n                  });\r\n              }\r\n            }\r\n\r\n            clearTimeout(ti);\r\n          });\r\n\r\n          break;\r\n\r\n        case \"section\":\r\n          templateId = s.id;\r\n          template = await appLoader.template.get(templateId, \"control\");\r\n          classes = s.class ? s.class.split(\" \") : \"\";\r\n          template.innerHTML = template.innerHTML.replace(\"{name}\", s.target);\r\n          template.innerHTML = template.innerHTML.replace(\"{label}\", s.label);\r\n\r\n          if (s.options) {\r\n            let optionsHtml = \"\";\r\n            for (let i in s.options) {\r\n              let option = s.options[i];\r\n\r\n              if (!option) {\r\n                continue;\r\n              }\r\n\r\n              optionsHtml +=\r\n                \"<option value='\" + i + \"'>\" + option + \"</option>\";\r\n            }\r\n\r\n            template.innerHTML = template.innerHTML.replace(\r\n              \"{options}\",\r\n              optionsHtml\r\n            );\r\n          }\r\n\r\n          if (s.conditional) {\r\n            for (let i in s.conditional) {\r\n              let obj = template.querySelector('[x-if=\"' + i + '\"]');\r\n\r\n              if (!obj) {\r\n                continue;\r\n              }\r\n\r\n              if (s.conditional[i] === false) {\r\n                let parent = obj.parentNode;\r\n                parent.removeChild(obj);\r\n\r\n                continue;\r\n              }\r\n\r\n              obj.innerHTML = s.conditional[i];\r\n            }\r\n          }\r\n\r\n          template.id = s.id ? s.id : \"\";\r\n\r\n          if (classes.length !== 0) {\r\n            template.classList.add(...classes);\r\n          } else if (s.class !== \"\") {\r\n            template.classList.add(s.class);\r\n          }\r\n\r\n          segmentContainer.querySelector(\"[x-content]\").appendChild(template);\r\n          break;\r\n\r\n        case \"group\":\r\n          if (s.content) {\r\n            await self._buildContent(s, s.content, false, segmentContainer);\r\n          }\r\n\r\n          break;\r\n      }\r\n    }\r\n\r\n    if (!mainContainer) {\r\n      self.mainContainer\r\n        .querySelector(\".instance:not(.hidden) [x-content]\")\r\n        .appendChild(segmentContainer);\r\n    } else {\r\n      mainContainer.appendChild(segmentContainer);\r\n    }\r\n  }\r\n\r\n  async _buildContainer(segment, mainContainer) {\r\n    let container = await appLoader.template.get(\r\n      mainContainer ? \"group\" : \"section\",\r\n      \"control\"\r\n    );\r\n\r\n    container.id = segment.name;\r\n    container.classList.add(\"segment-container\", \"w-full\", \"flex\", \"flex-wrap\");\r\n\r\n    for (let i in segment) {\r\n      if (\"string\" === typeof segment[i]) {\r\n        container.innerHTML = container.innerHTML.replaceAll(\r\n          \"{\" + i + \"}\",\r\n          segment[i]\r\n        );\r\n      }\r\n\r\n      if (\"object\" === typeof segment[i]) {\r\n        container.innerHTML = container.innerHTML.replaceAll(\r\n          \"{\" + i + \"}\",\r\n          JSON.stringify(segment[i])\r\n        );\r\n      }\r\n    }\r\n\r\n    return container;\r\n  }\r\n\r\n  isCondition(condition) {\r\n    return condition.indexOf(\"=\") !== -1;\r\n  }\r\n\r\n  splitCondition(condition) {\r\n    if (condition.indexOf(\"!=\") !== -1) {\r\n      let split = condition.split(\"!=\");\r\n      return [split[0], \"!=\", split[1]];\r\n    }\r\n\r\n    if (condition.indexOf(\"=\") !== -1) {\r\n      let split = condition.split(\"=\");\r\n      return [split[0], \"=\", split[1]];\r\n    }\r\n  }\r\n\r\n  solveCondition(where, value, field) {\r\n    if (where.indexOf(\"!=\") !== -1) {\r\n      return field.value !== value;\r\n    }\r\n\r\n    if (where.indexOf(\"=\") !== -1) {\r\n      return field.value === value;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Hydrates the controller environment with data from live dom.\r\n   * Plus enabling us to bind events if none is existing, this is great\r\n   * for dynamic if/else statements based on x/y options.\r\n   *\r\n   * @return {void}\r\n   */\r\n  async hydrate() {\r\n    const self = this;\r\n    let ran = false;\r\n    setTimeout(() => {\r\n      let values = self.mainContainer.querySelectorAll(\"[x-control-value]\");\r\n      for (let i in values) {\r\n        let v = values[i];\r\n        let failed = false;\r\n\r\n        if (\"object\" !== typeof v) {\r\n          continue;\r\n        }\r\n\r\n        if (!v.hasAttribute(\"name\")) {\r\n          console.error(\"Name attribute was missing from block\");\r\n          continue;\r\n        }\r\n\r\n        let name = v.getAttribute(\"name\");\r\n        if (name.indexOf(\"@\") !== -1) {\r\n          // Refers to data entry on sub element of block\r\n          let steps = name.replace(\"@\", \"\").split(\".\");\r\n          let entry = structuredClone(steps[0]);\r\n\r\n          let value = self.block[entry];\r\n          if (!value) {\r\n            // console.log(\"Failed to handle: \" + name);\r\n            continue;\r\n          }\r\n\r\n          for (let i in steps) {\r\n            if (i === 0) {\r\n              continue;\r\n            }\r\n\r\n            if (!steps[i] || !value[steps[i]]) {\r\n              failed = true;\r\n              continue;\r\n            }\r\n\r\n            value = value[steps[i]];\r\n          }\r\n\r\n          if (failed) {\r\n            // console.log(\"Failed to handle: \" + name);\r\n            continue;\r\n          }\r\n\r\n          v.value = value;\r\n          ran = true;\r\n        }\r\n\r\n        if (name.indexOf(\".\") !== -1 && !ran) {\r\n          // Refers to an object of data on the block\r\n          // Refers to data entry on sub element of block\r\n          let steps = name.split(\".\");\r\n\r\n          let value = self.block;\r\n          if (!value) {\r\n            // console.log(\"Failed to handle: \" + name);\r\n            continue;\r\n          }\r\n\r\n          for (let i in steps) {\r\n            if (!steps[i] || !value[steps[i]]) {\r\n              failed = true;\r\n              continue;\r\n            }\r\n\r\n            value = value[steps[i]];\r\n          }\r\n\r\n          if (failed) {\r\n            console.log(\"Failed to handle: \" + name);\r\n            continue;\r\n          }\r\n\r\n          if (\"object\" === typeof value) {\r\n            // expect extra field\r\n            v.value = value[0];\r\n            document.querySelector('[name=\"' + name + '-type\"]').value =\r\n              value[1];\r\n          } else {\r\n            v.value = value;\r\n          }\r\n\r\n          ran = true;\r\n        }\r\n\r\n        // Expect it to be an standard data entry if none of the above triggered\r\n        if (self.block[name] && !ran) {\r\n          v.value = self.block[name];\r\n        }\r\n\r\n        if (!v.classList.contains(\"hydrated\")) {\r\n          v.classList.add(\"hydrated\");\r\n          self._registerControlEvents(v);\r\n        }\r\n      }\r\n    });\r\n  }\r\n\r\n  applyConditions(block) {\r\n    const self = this;\r\n    let conditions = self.mainContainer.querySelectorAll(\"[x-if]\");\r\n\r\n    for (let i in conditions) {\r\n      let condition = conditions[i];\r\n\r\n      if (\"object\" !== typeof condition) {\r\n        continue;\r\n      }\r\n\r\n      let conditionKey = condition.getAttribute(\"x-if\");\r\n      let isOposite = conditionKey.charAt(0) === \"!\";\r\n\r\n      if (isOposite) {\r\n        // Reverse\r\n        if (block[conditionKey] && !condition.classList.contains(\"hidden\")) {\r\n          condition.classList.add(\"hidden\");\r\n        } else if (\r\n          !block[conditionKey] &&\r\n          !condition.classList.contains(\"hidden\")\r\n        ) {\r\n          condition.classList.remove(\"hidden\");\r\n        }\r\n      } else {\r\n        if (!block[conditionKey] && !condition.classList.contains(\"hidden\")) {\r\n          condition.classList.add(\"hidden\");\r\n        } else if (\r\n          block[conditionKey] &&\r\n          condition.classList.contains(\"hidden\")\r\n        ) {\r\n          condition.classList.remove(\"hidden\");\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Registers the events for the control\r\n   * Note: This is merely for finding type of control\r\n   * after which it will resolve that method instead\r\n   *\r\n   * @param {object} node\r\n   * @return {mixed}\r\n   */\r\n  _registerControlEvents(node) {\r\n    const self = this;\r\n    switch (node.tagName) {\r\n      case \"INPUT\":\r\n        // Get type to ensure what kind of input we are dealing with.\r\n        let type = node.getAttribute(\"type\");\r\n        let method =\r\n          \"_register\" +\r\n          type.charAt(0).toUpperCase() +\r\n          type.substring(1) +\r\n          \"InputEvents\";\r\n\r\n        return self[method](node);\r\n\r\n        break;\r\n      case \"SELECT\":\r\n        return self._registerSelectEvents(node);\r\n        break;\r\n\r\n      default:\r\n        return false;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Registers the events for the control\r\n   * Note: This is only for select based controls\r\n   *\r\n   * @param {object} node\r\n   */\r\n  _registerSelectEvents(node) {\r\n    const self = this;\r\n    let name = node.getAttribute(\"name\");\r\n    let extra = document.querySelector('[name=\"' + name + '-type\"]');\r\n    if (extra) {\r\n      extra.addEventListener(\"change\", function (e) {\r\n        window.getAppLoader().event.emit(\"bb-control-select_change-before\", {\r\n          node: node,\r\n          changeEvent: e,\r\n          controller: self,\r\n        });\r\n      });\r\n    }\r\n\r\n    node.addEventListener(\"change\", function (e) {\r\n      window.getAppLoader().event.emit(\"bb-control-select_change-before\", {\r\n        node: node,\r\n        changeEvent: e,\r\n        controller: self,\r\n      });\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Registers the events for the control\r\n   * Note: This is only for number input based controls\r\n   *\r\n   * @param {object} node\r\n   */\r\n  _registerNumberInputEvents(node) {\r\n    const self = this;\r\n\r\n    let name = node.getAttribute(\"name\");\r\n    let extra = document.querySelector('[name=\"' + name + '-type\"]');\r\n\r\n    if (extra) {\r\n      extra.addEventListener(\"change\", function (e) {\r\n        window.getAppLoader().event.emit(\"bb-control-number_keyup-before\", {\r\n          node: node,\r\n          keyUpEvent: e,\r\n          controller: self,\r\n        });\r\n      });\r\n    }\r\n\r\n    node.addEventListener(\"keyup\", function (e) {\r\n      let value = e.target.value;\r\n\r\n      let nbTimeout = setTimeout(() => {\r\n        if (value === e.target.value) {\r\n          window.getAppLoader().event.emit(\"bb-control-number_keyup-before\", {\r\n            node: node,\r\n            keyUpEvent: e,\r\n            controller: self,\r\n          });\r\n        }\r\n        clearTimeout(nbTimeout);\r\n      }, 250);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Registers the events for the control\r\n   * Note: This is only for text input based controls\r\n   *\r\n   * @param {object} node\r\n   */\r\n  _registerTextInputEvents(node) {\r\n    const self = this;\r\n\r\n    let name = node.getAttribute(\"name\");\r\n    let extra = document.querySelector('[name=\"' + name + '-type\"]');\r\n\r\n    if (extra) {\r\n      extra.addEventListener(\"change\", function (e) {\r\n        window.getAppLoader().event.emit(\"bb-control-text_keyup-before\", {\r\n          node: node,\r\n          keyUpEvent: e,\r\n          controller: self,\r\n        });\r\n      });\r\n    }\r\n\r\n    node.addEventListener(\"keyup\", function (e) {\r\n      let value = e.target.value;\r\n      let nbTimeout = setTimeout(() => {\r\n        if (value === e.target.value) {\r\n          window.getAppLoader().event.emit(\"bb-control-text_keyup-before\", {\r\n            node: node,\r\n            keyUpEvent: e,\r\n            controller: self,\r\n          });\r\n        }\r\n        clearTimeout(nbTimeout);\r\n      }, 250);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Registers the events for the control\r\n   * Note: This is only for radio input based controls\r\n   *\r\n   * @param {object} node\r\n   */\r\n  _registerRadioInputEvents(node) {\r\n    const self = this;\r\n    let name = node.getAttribute(\"name\");\r\n    let extra = document.querySelector('[name=\"' + name + '-type\"]');\r\n\r\n    if (extra) {\r\n      extra.addEventListener(\"change\", function (e) {\r\n        window.getAppLoader().event.emit(\"bb-control-radio_change-before\", {\r\n          node: node,\r\n          changeEvent: e,\r\n          controller: self,\r\n        });\r\n      });\r\n    }\r\n\r\n    node.addEventListener(\"change\", function (e) {\r\n      window.getAppLoader().event.emit(\"bb-control-radio_change-before\", {\r\n        node: node,\r\n        changeEvent: e,\r\n        controller: self,\r\n      });\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Registers the events for the control\r\n   * Note: This is only for checkbox input based controls\r\n   *\r\n   * @param {object} node\r\n   */\r\n  _registerCheckboxInputEvents(node) {\r\n    const self = this;\r\n    let name = node.getAttribute(\"name\");\r\n    let extra = document.querySelector('[name=\"' + name + '-type\"]');\r\n\r\n    if (extra) {\r\n      extra.addEventListener(\"change\", function (e) {\r\n        window.getAppLoader().event.emit(\"bb-control-checkbox_change-before\", {\r\n          node: node,\r\n          changeEvent: e,\r\n          controller: self,\r\n        });\r\n      });\r\n    }\r\n\r\n    node.addEventListener(\"change\", function (e) {\r\n      window.getAppLoader().event.emit(\"bb-control-checkbox_change-before\", {\r\n        node: node,\r\n        changeEvent: e,\r\n        controller: self,\r\n      });\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Registers the events for the control\r\n   * Note: This is only for range input based controls\r\n   *\r\n   * @param {object} node\r\n   */\r\n  _registerRangeInputEvents(node) {\r\n    const self = this;\r\n    let name = node.getAttribute(\"name\");\r\n    let extra = document.querySelector('[name=\"' + name + '-type\"]');\r\n\r\n    if (extra) {\r\n      extra.addEventListener(\"change\", function (e) {\r\n        window.getAppLoader().event.emit(\"bb-control-range_change-before\", {\r\n          node: node,\r\n          changeEvent: e,\r\n          controller: self,\r\n        });\r\n      });\r\n    }\r\n\r\n    node.addEventListener(\"change\", function (e) {\r\n      window.getAppLoader().event.emit(\"bb-control-range_change-before\", {\r\n        node: node,\r\n        changeEvent: e,\r\n        controller: self,\r\n      });\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Registers the events for the control\r\n   * Note: This is only for hidden input based controls\r\n   *\r\n   * @param {object} node\r\n   */\r\n  _registerHiddenInputEvents(node) {\r\n    const self = this;\r\n    let name = node.getAttribute(\"name\");\r\n    let extra = document.querySelector('[name=\"' + name + '-type\"]');\r\n\r\n    if (extra) {\r\n      extra.addEventListener(\"change\", function (e) {\r\n        window.getAppLoader().event.emit(\"bb-control-hidden_change-before\", {\r\n          node: node,\r\n          changeEvent: e,\r\n          controller: self,\r\n        });\r\n      });\r\n    }\r\n\r\n    node.addEventListener(\"change\", function (e) {\r\n      window.getAppLoader().event.emit(\"bb-control-hidden_change-before\", {\r\n        node: node,\r\n        changeEvent: e,\r\n        controller: self,\r\n      });\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Spawns the controller modal for the block\r\n   * So the user can configure the block to fulfill the needs.\r\n   *\r\n   * @return {void}\r\n   */\r\n  async spawn() {\r\n    const self = this;\r\n\r\n    await appLoader.action\r\n      .withOptions({\r\n        id: \"builder-block-edit-modal\",\r\n      })\r\n      .run(\"modal\", \"builder-block-edit-modal\");\r\n\r\n    setTimeout(function () {\r\n      appLoader.event.emit(\"bb-block-edit-after\", {\r\n        controller: self,\r\n        block: self.block,\r\n        item: self.item,\r\n      });\r\n    }, 100);\r\n  }\r\n\r\n  generateId() {\r\n    return uuidv4();\r\n  }\r\n}\r\n\r\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Controller);\r\n\n\n//# sourceURL=webpack://block-builder-editor/./src/core/block-control/controller.js?");

/***/ })

}]);