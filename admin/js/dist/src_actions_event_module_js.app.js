"use strict";
/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunkblock_builder_editor"] = self["webpackChunkblock_builder_editor"] || []).push([["src_actions_event_module_js"],{

/***/ "./src/actions/event/module.js":
/*!*************************************!*\
  !*** ./src/actions/event/module.js ***!
  \*************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\nclass Event {\r\n  constructor(link) {\r\n    const self = this;\r\n\r\n    // Set class reference to object\r\n    self.link = link;\r\n    let options = self.link.getAttribute(\"x-options\");\r\n    try {\r\n      options = JSON.parse(options);\r\n    } catch (e) {\r\n      console.log(e);\r\n      options = {};\r\n    }\r\n    self.options = options;\r\n\r\n    if (!self.options.when || self.options.when === \"click\") {\r\n      link.addEventListener(\"click\", function (event) {\r\n        let options = self.link.getAttribute(\"x-options\");\r\n        try {\r\n          options = JSON.parse(options);\r\n        } catch (e) {\r\n          options = {};\r\n        }\r\n\r\n        self.options = options;\r\n\r\n        self.onPress(event, self);\r\n      });\r\n    }\r\n\r\n    if (self.options.when === \"hover\") {\r\n      link.addEventListener(\"mouseenter\", function (event) {\r\n        let options = self.link.getAttribute(\"x-options\");\r\n        try {\r\n          options = JSON.parse(options);\r\n        } catch (e) {\r\n          options = {};\r\n        }\r\n\r\n        self.options = options;\r\n\r\n        self.onMouseEnter(event, self);\r\n      });\r\n\r\n      link.addEventListener(\"mouseleave\", function (event) {\r\n        let options = self.link.getAttribute(\"x-options\");\r\n        try {\r\n          options = JSON.parse(options);\r\n        } catch (e) {\r\n          options = {};\r\n        }\r\n\r\n        self.options = options;\r\n\r\n        self.onMouseLeave(event, self);\r\n      });\r\n    }\r\n\r\n    if (self.options.when === \"change\") {\r\n      link.addEventListener(\"change\", function (event) {\r\n        let options = self.link.getAttribute(\"x-options\");\r\n        try {\r\n          options = JSON.parse(options);\r\n        } catch (e) {\r\n          options = {};\r\n        }\r\n\r\n        self.options = options;\r\n\r\n        self.onChange(event, self);\r\n      });\r\n    }\r\n  }\r\n\r\n  onPress(e, self) {\r\n    e.preventDefault();\r\n    self.resolveEvent(function (eventName) {\r\n      try {\r\n        window.getAppLoader().event.emit(eventName + \"-before\", {\r\n          attributes: {\r\n            ...self.options.attributes,\r\n            ...{\r\n              type: \"click\",\r\n              srcEventElement: self.link,\r\n            },\r\n          },\r\n        });\r\n      } catch (e) {\r\n        console.log(e);\r\n      }\r\n\r\n      try {\r\n        window.getAppLoader().event.emit(eventName, {\r\n          attributes: {\r\n            ...self.options.attributes,\r\n            ...{\r\n              type: \"click\",\r\n              srcEventElement: self.link,\r\n            },\r\n          },\r\n        });\r\n      } catch (e) {\r\n        console.log(e);\r\n      }\r\n    });\r\n  }\r\n\r\n  onMouseEnter(e, self) {\r\n    e.preventDefault();\r\n    self.resolveEvent(function (eventName) {\r\n      try {\r\n        window.getAppLoader().event.emit(eventName + \"-before\", {\r\n          attributes: {\r\n            ...self.options.attributes,\r\n            ...{\r\n              type: \"hover\",\r\n              srcEventElement: self.link,\r\n              state: \"enter\",\r\n            },\r\n          },\r\n        });\r\n      } catch (e) {\r\n        console.log(e);\r\n      }\r\n\r\n      try {\r\n        window.getAppLoader().event.emit(eventName, {\r\n          attributes: {\r\n            ...self.options.attributes,\r\n            ...{\r\n              type: \"hover\",\r\n              srcEventElement: self.link,\r\n              state: \"enter\",\r\n            },\r\n          },\r\n        });\r\n      } catch (e) {\r\n        console.log(e);\r\n      }\r\n    });\r\n  }\r\n\r\n  onMouseLeave(e, self) {\r\n    e.preventDefault();\r\n    self.resolveEvent(function (eventName) {\r\n      try {\r\n        window.getAppLoader().event.emit(eventName + \"-before\", {\r\n          attributes: {\r\n            ...self.options.attributes,\r\n            ...{\r\n              type: \"hover\",\r\n              srcEventElement: self.link,\r\n              state: \"leave\",\r\n            },\r\n          },\r\n        });\r\n      } catch (e) {\r\n        console.log(e);\r\n      }\r\n      try {\r\n        window.getAppLoader().event.emit(eventName, {\r\n          attributes: {\r\n            ...self.options.attributes,\r\n            ...{\r\n              type: \"hover\",\r\n              srcEventElement: self.link,\r\n              state: \"leave\",\r\n            },\r\n          },\r\n        });\r\n      } catch (e) {\r\n        console.log(e);\r\n      }\r\n    });\r\n  }\r\n\r\n  onChange(e, self) {\r\n    e.preventDefault();\r\n    self.resolveEvent(function (eventName) {\r\n      try {\r\n        window.getAppLoader().event.emit(eventName + \"-before\", {\r\n          attributes: {\r\n            ...self.options.attributes,\r\n            ...{\r\n              type: \"change\",\r\n              srcEventElement: self.link,\r\n            },\r\n          },\r\n        });\r\n      } catch (e) {\r\n        console.log(e);\r\n      }\r\n      try {\r\n        window.getAppLoader().event.emit(eventName, {\r\n          attributes: {\r\n            ...self.options.attributes,\r\n            ...{\r\n              type: \"change\",\r\n              srcEventElement: self.link,\r\n            },\r\n          },\r\n        });\r\n      } catch (e) {\r\n        console.log(e);\r\n      }\r\n    });\r\n  }\r\n\r\n  resolveEvent(closure) {\r\n    const self = this;\r\n    let eventName = self.options.name;\r\n    closure(eventName);\r\n  }\r\n}\r\n\r\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Event);\r\n\n\n//# sourceURL=webpack://block-builder-editor/./src/actions/event/module.js?");

/***/ })

}]);